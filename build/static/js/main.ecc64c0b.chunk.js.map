{"version":3,"sources":["images/background2.jfif","App.styles.ts","components/FirstTime.tsx","components/QuestionCard.styles.ts","API.ts","components/QuestionCard.tsx","utils.ts","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","BGImage","Wrapper","styled","div","FirstTime","callback","type","className","onClick","Difficulty","ButtonWrapper","correct","userClicked","QuestionCard","userAnswer","answers","question","questionNumber","totalQuestions","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","fetchQuizQuestions","a","amount","difficulty","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","firstTime","startFirstTime","startTrivia","quizData","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestionNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecc64c0b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background2.68117bda.jfif\";","import styled, { createGlobalStyle } from 'styled-components'\r\n\r\n// @ts-ignore\r\nimport BGImage from './images/background2.jfif'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    maring: 0;\r\n    padding: 0 20;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Catamaran', sans-serif;\r\n  }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\n\r\n> p {\r\n  color: #fff;\r\n}\r\n\r\n.score {\r\n  color: #fff;\r\n  font-size: 2rem;\r\n  margin: 0;\r\n}\r\n\r\nh1 {\r\n  font-family: 'Catamaran', sans-serif;\r\n  background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n  background-size: 100%;\r\n  background-clip: text;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  -moz-background-clip: text;\r\n  -moz-text-fill-color: transparent;\r\n  filter: drop-shadow(2px 2px #00085a3);\r\n  font-size: 70px;\r\n  font-weight: 400;\r\n  text-align: center;\r\n  margin: 20px;\r\n}\r\n\r\n.start, .next {\r\n  cursor: pointer;\r\n  background: linear-gradient(180deg, #fff, #ffcc91);\r\n  border: 2px solid #d38558;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  border-radius: 10px;\r\n  height: 40px;\r\n  margin: 20px 0;\r\n  padding: 0 40px;\r\n}\r\n\r\n.start {\r\n  max-width: 200px;\r\n}\r\n`","import React from 'react';\r\n\r\ntype FirstTimeProps = {\r\n  callback: () => any;\r\n}\r\n\r\nconst FirstTime: React.FC<FirstTimeProps> = ({\r\n  callback\r\n}) => (\r\n  <div>\r\n    <input type=\"text\" />\r\n    <button className='start' onClick={callback}>New Game</button>\r\n  </div>\r\n)\r\n\r\nexport default FirstTime","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n    correct\r\n      ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n      : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`","import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  dififculty: Difficulty;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = 'easy',\r\n  MEDIUM = 'medium',\r\n  HARD = 'hard'\r\n};\r\n\r\ninterface FetchQuizQuestions {\r\n  amount: number;\r\n  difficulty: Difficulty;\r\n};\r\n\r\nexport const fetchQuizQuestions = async ({ amount, difficulty }: FetchQuizQuestions): Promise<QuestionState[]> => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n\r\n  const data = await (await fetch(endpoint)).json();\r\n\r\n  return data.results.map((question: Question) => (\r\n    {\r\n      ...question,\r\n      answers: shuffleArray([\r\n        ...question.incorrect_answers,\r\n        question.correct_answer\r\n      ])\r\n    }\r\n  ))\r\n};","// STYLES\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\r\n\r\nimport React from 'react';\r\n\r\n// TYPES\r\nimport { AnswerObject } from '../App';\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  userAnswer,\r\n  callback,\r\n  answers,\r\n  question,\r\n  questionNumber,\r\n  totalQuestions\r\n}) => (\r\n  <Wrapper>\r\n    <p className='number'>\r\n      Question: {questionNumber} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n\r\n    <div>\r\n      {answers.map(answer => (\r\n        <ButtonWrapper\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer}\r\n          key={answer}>\r\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard","export const shuffleArray = (array: any[]): any[] => [...array].sort(() => Math.random() - 0.5);","// STYLES\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nimport React, { useState } from 'react';\n\n\n// COMPONENTS\nimport FirstTime from './components/FirstTime'\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuizQuestions } from './API';\n\n// TYPES\nimport { QuestionState, Difficulty } from './API';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [firstTime, setFirstTime] = useState(true);\n\n\n  const startFirstTime = async () => {\n\n  }\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const quizData = { amount: TOTAL_QUESTIONS, difficulty: Difficulty.EASY };\n    const newQuestions = await fetchQuizQuestions(quizData);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore(prev => prev + 1);\n\n      const answerObject: AnswerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n\n      setUserAnswers(prev => [...prev, answerObject]);\n\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestionNumber = number + 1;\n\n    if (nextQuestionNumber === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestionNumber)\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {(firstTime && <FirstTime\n          callback={startFirstTime}\n        />)}\n\n        {((!firstTime && gameOver) || userAnswers.length === TOTAL_QUESTIONS) && (\n          <button className='start' onClick={startTrivia}>\n            Start\n          </button>\n        )}\n\n        {!gameOver && <p className='score'>Score: {score}</p>}\n\n        {loading && <p>Loading Questions ...</p>}\n\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n\n        {\n          !gameOver\n          && !loading\n          && userAnswers.length === number + 1\n          && number !== TOTAL_QUESTIONS - 1\n          && <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        }\n\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}